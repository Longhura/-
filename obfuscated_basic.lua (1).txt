-- Roblox Executor Script with Fly, NoClip, and Speed Walking
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- Create main GUI
local main = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local Title = Instance.new("TextLabel")

-- Create fly GUI elements
local FlyFrame = Instance.new("Frame")
local up = Instance.new("TextButton")
local down = Instance.new("TextButton")
local onof = Instance.new("TextButton")
local FlyLabel = Instance.new("TextLabel")
local plus = Instance.new("TextButton")
local speed = Instance.new("TextLabel")
local mine = Instance.new("TextButton")

-- Create control buttons
local NoClipButton = Instance.new("TextButton")
local SpeedWalkButton = Instance.new("TextButton")
local SpeedInput = Instance.new("TextBox")
local SpeedLabel = Instance.new("TextLabel")
local closebutton = Instance.new("TextButton")
local mini = Instance.new("TextButton")
local mini2 = Instance.new("TextButton")

-- Setup main GUI
main.Name = "ExecutorGUI"
main.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
main.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
main.ResetOnSpawn = false

-- Setup main frame
MainFrame.Name = "MainFrame"
MainFrame.Parent = main
MainFrame.BackgroundColor3 = Color3.fromRGB(163, 255, 137)
MainFrame.BorderColor3 = Color3.fromRGB(103, 221, 213)
MainFrame.Position = UDim2.new(0.05, 0, 0.05, 0)
MainFrame.Size = UDim2.new(0, 250, 0, 200)
MainFrame.Active = true
MainFrame.Draggable = true

-- Setup title
Title.Name = "Title"
Title.Parent = MainFrame
Title.BackgroundColor3 = Color3.fromRGB(242, 60, 255)
Title.Size = UDim2.new(1, 0, 0, 30)
Title.Font = Enum.Font.SourceSansBold
Title.Text = "Roblox Executor"
Title.TextColor3 = Color3.fromRGB(0, 0, 0)
Title.TextSize = 18

-- Setup NoClip button
NoClipButton.Name = "NoClipButton"
NoClipButton.Parent = MainFrame
NoClipButton.BackgroundColor3 = Color3.fromRGB(215, 255, 121)
NoClipButton.Position = UDim2.new(0.05, 0, 0.2, 0)
NoClipButton.Size = UDim2.new(0.9, 0, 0, 30)
NoClipButton.Font = Enum.Font.SourceSansBold
NoClipButton.Text = "NoClip: OFF"
NoClipButton.TextColor3 = Color3.fromRGB(0, 0, 0)
NoClipButton.TextSize = 16

-- Setup SpeedWalk button
SpeedWalkButton.Name = "SpeedWalkButton"
SpeedWalkButton.Parent = MainFrame
SpeedWalkButton.BackgroundColor3 = Color3.fromRGB(79, 255, 152)
SpeedWalkButton.Position = UDim2.new(0.05, 0, 0.35, 0)
SpeedWalkButton.Size = UDim2.new(0.9, 0, 0, 30)
SpeedWalkButton.Font = Enum.Font.SourceSansBold
SpeedWalkButton.Text = "Speed Walk: OFF"
SpeedWalkButton.TextColor3 = Color3.fromRGB(0, 0, 0)
SpeedWalkButton.TextSize = 16

-- Setup Speed input
SpeedLabel.Name = "SpeedLabel"
SpeedLabel.Parent = MainFrame
SpeedLabel.BackgroundTransparency = 1
SpeedLabel.Position = UDim2.new(0.05, 0, 0.5, 0)
SpeedLabel.Size = UDim2.new(0.3, 0, 0, 30)
SpeedLabel.Font = Enum.Font.SourceSansBold
SpeedLabel.Text = "Speed:"
SpeedLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
SpeedLabel.TextSize = 16
SpeedLabel.TextXAlignment = Enum.TextXAlignment.Left

SpeedInput.Name = "SpeedInput"
SpeedInput.Parent = MainFrame
SpeedInput.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
SpeedInput.Position = UDim2.new(0.35, 0, 0.5, 0)
SpeedInput.Size = UDim2.new(0.6, 0, 0, 30)
SpeedInput.Font = Enum.Font.SourceSansBold
SpeedInput.Text = "0.01"
SpeedInput.TextColor3 = Color3.fromRGB(0, 0, 0)
SpeedInput.TextSize = 16

-- Setup close and minimize buttons
closebutton.Name = "CloseButton"
closebutton.Parent = MainFrame
closebutton.BackgroundColor3 = Color3.fromRGB(225, 25, 0)
closebutton.Position = UDim2.new(0, 0, -0.15, 0)
closebutton.Size = UDim2.new(0, 45, 0, 28)
closebutton.Font = Enum.Font.SourceSansBold
closebutton.Text = "X"
closebutton.TextColor3 = Color3.fromRGB(255, 255, 255)
closebutton.TextSize = 20

mini.Name = "MinimizeButton"
mini.Parent = MainFrame
mini.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
mini.Position = UDim2.new(0.2, 0, -0.15, 0)
mini.Size = UDim2.new(0, 45, 0, 28)
mini.Font = Enum.Font.SourceSansBold
mini.Text = "-"
mini.TextColor3 = Color3.fromRGB(255, 255, 255)
mini.TextSize = 20

mini2.Name = "RestoreButton"
mini2.Parent = MainFrame
mini2.BackgroundColor3 = Color3.fromRGB(192, 150, 230)
mini2.Position = UDim2.new(0.2, 0, -0.15, 0)
mini2.Size = UDim2.new(0, 45, 0, 28)
mini2.Font = Enum.Font.SourceSansBold
mini2.Text = "+"
mini2.TextColor3 = Color3.fromRGB(255, 255, 255)
mini2.TextSize = 20
mini2.Visible = false

-- Setup Fly button
onof.Name = "FlyButton"
onof.Parent = MainFrame
onof.BackgroundColor3 = Color3.fromRGB(255, 249, 74)
onof.Position = UDim2.new(0.05, 0, 0.65, 0)
onof.Size = UDim2.new(0.9, 0, 0, 30)
onof.Font = Enum.Font.SourceSansBold
onof.Text = "Fly: OFF"
onof.TextColor3 = Color3.fromRGB(0, 0, 0)
onof.TextSize = 16

-- Setup Fly Frame (initially hidden)
FlyFrame = Instance.new("Frame")
FlyFrame.Name = "FlyFrame"
FlyFrame.Parent = main
FlyFrame.BackgroundColor3 = Color3.fromRGB(163, 255, 137)
FlyFrame.BorderColor3 = Color3.fromRGB(103, 221, 213)
FlyFrame.Position = UDim2.new(0.05, 0, 0.6, 0)
FlyFrame.Size = UDim2.new(0, 190, 0, 57)
FlyFrame.Visible = false
FlyFrame.Active = true
FlyFrame.Draggable = true

-- Setup UP button
up.Name = "up"
up.Parent = FlyFrame
up.BackgroundColor3 = Color3.fromRGB(79, 255, 152)
up.Size = UDim2.new(0, 44, 0, 28)
up.Font = Enum.Font.SourceSans
up.Text = "UP"
up.TextColor3 = Color3.fromRGB(0, 0, 0)
up.TextSize = 14.000

-- Setup DOWN button
down.Name = "down"
down.Parent = FlyFrame
down.BackgroundColor3 = Color3.fromRGB(215, 255, 121)
down.Position = UDim2.new(0, 0, 0.491228074, 0)
down.Size = UDim2.new(0, 44, 0, 28)
down.Font = Enum.Font.SourceSans
down.Text = "DOWN"
down.TextColor3 = Color3.fromRGB(0, 0, 0)
down.TextSize = 14.000

-- Setup FLY label
FlyLabel = Instance.new("TextLabel")
FlyLabel.Parent = FlyFrame
FlyLabel.BackgroundColor3 = Color3.fromRGB(242, 60, 255)
FlyLabel.Position = UDim2.new(0.469327301, 0, 0, 0)
FlyLabel.Size = UDim2.new(0, 100, 0, 28)
FlyLabel.Font = Enum.Font.SourceSans
FlyLabel.Text = "FLY CONTROLS"
FlyLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
FlyLabel.TextScaled = true
FlyLabel.TextSize = 14.000
FlyLabel.TextWrapped = true

-- Setup PLUS button
plus.Name = "plus"
plus.Parent = FlyFrame
plus.BackgroundColor3 = Color3.fromRGB(133, 145, 255)
plus.Position = UDim2.new(0.231578946, 0, 0, 0)
plus.Size = UDim2.new(0, 45, 0, 28)
plus.Font = Enum.Font.SourceSans
plus.Text = "+"
plus.TextColor3 = Color3.fromRGB(0, 0, 0)
plus.TextScaled = true
plus.TextSize = 14.000
plus.TextWrapped = true

-- Setup SPEED display
speed.Name = "speed"
speed.Parent = FlyFrame
speed.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
speed.Position = UDim2.new(0.468421042, 0, 0.491228074, 0)
speed.Size = UDim2.new(0, 44, 0, 28)
speed.Font = Enum.Font.SourceSans
speed.Text = "1"
speed.TextColor3 = Color3.fromRGB(0, 0, 0)
speed.TextScaled = true
speed.TextSize = 14.000
speed.TextWrapped = true

-- Setup MINUS button
mine.Name = "mine"
mine.Parent = FlyFrame
mine.BackgroundColor3 = Color3.fromRGB(123, 255, 247)
mine.Position = UDim2.new(0.231578946, 0, 0.491228074, 0)
mine.Size = UDim2.new(0, 45, 0, 29)
mine.Font = Enum.Font.SourceSans
mine.Text = "-"
mine.TextColor3 = Color3.fromRGB(0, 0, 0)
mine.TextScaled = true
mine.TextSize = 14.000
mine.TextWrapped = true

-- Variables
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

local noClipEnabled = false
local speedWalkEnabled = false
local flyEnabled = false
local speeds = 1
local tpwalking = false
local nowe = false

-- Function to update character references
local function updateCharacterReferences()
    character = player.Character
    if character then
        humanoid = character:WaitForChild("Humanoid")
        hrp = character:WaitForChild("HumanoidRootPart")
    end
end

-- Notification
game:GetService("StarterGui"):SetCore("SendNotification", { 
    Title = "Executor Loaded";
    Text = "Fly, NoClip, and Speed Walk";
    Icon = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
Duration = 5;

-- NOCLIP IMPLEMENTATION
local function toggleNoClip()
    noClipEnabled = not noClipEnabled
    NoClipButton.Text = "NoClip: " .. (noClipEnabled and "ON" or "OFF")
    NoClipButton.BackgroundColor3 = noClipEnabled and Color3.fromRGB(180, 180, 0) or Color3.fromRGB(215, 255, 121)
end

local function setNoCollision()
    if character and noClipEnabled then
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide == true then
                part.CanCollide = false
            end
        end
    end
end

-- SPEED WALK IMPLEMENTATION
local function toggleSpeedWalk()
    speedWalkEnabled = not speedWalkEnabled
    SpeedWalkButton.Text = "Speed Walk: " .. (speedWalkEnabled and "ON" or "OFF")
    SpeedWalkButton.BackgroundColor3 = speedWalkEnabled and Color3.fromRGB(0, 180, 0) or Color3.fromRGB(79, 255, 152)
    
    if speedWalkEnabled then
        tpwalking = true
        
        -- Allowed states for movement
        local allowedStates = {
            [Enum.HumanoidStateType.Running] = true,
            [Enum.HumanoidStateType.RunningNoPhysics] = true,
            [Enum.HumanoidStateType.Freefall] = true,
            [Enum.HumanoidStateType.Jumping] = true,
            [Enum.HumanoidStateType.Swimming] = true,
            [Enum.HumanoidStateType.Seated] = true,
            [Enum.HumanoidStateType.Landed] = true
        }
        
        -- Function to check if movement is allowed
        local function canTranslate()
            local state = humanoid:GetState()
            return allowedStates[state] or false
        end
        
        -- Function to check for collisions
        local function isPathClear(direction)
            local ray = Ray.new(hrp.Position, direction.Unit * 3)
            local hit = Workspace:FindPartOnRayWithIgnoreList(ray, {character})
            return hit == nil
        end
        
        -- Function to check if input is a number
        local function isNumber(str)
            return tonumber(str) ~= nil or str == 'inf'
        end
        
        spawn(function()
            local hb = RunService.Heartbeat
            
            while tpwalking and hb:Wait() and character and humanoid and humanoid.Parent do
                local moveDir = humanoid.MoveDirection
                if moveDir.Magnitude > 0 and canTranslate() then
                    local walkSpeed = tonumber(SpeedInput.Text) or 0.01
                    local step = moveDir.Unit * walkSpeed
                    if isNumber(walkSpeed) and isPathClear(step) then
                        character:TranslateBy(step)
                    end
                end
            end
        end)
    else
        tpwalking = false
    end
end

-- FLY IMPLEMENTATION
-- Add keyboard controls for flying
local ctrl = {f = 0, b = 0, l = 0, r = 0}
local lastctrl = {f = 0, b = 0, l = 0, r = 0}

-- Handle keyboard input
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then
        ctrl.f = 1
    elseif input.KeyCode == Enum.KeyCode.S then
        ctrl.b = 1
    elseif input.KeyCode == Enum.KeyCode.A then
        ctrl.l = 1
    elseif input.KeyCode == Enum.KeyCode.D then
        ctrl.r = 1
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then
        ctrl.f = 0
    elseif input.KeyCode == Enum.KeyCode.S then
        ctrl.b = 0
    elseif input.KeyCode == Enum.KeyCode.A then
        ctrl.l = 0
    elseif input.KeyCode == Enum.KeyCode.D then
        ctrl.r = 0
    end
end)

local function toggleFly()
    flyEnabled = not flyEnabled
    onof.Text = "Fly: " .. (flyEnabled and "ON" or "OFF")
    onof.BackgroundColor3 = flyEnabled and Color3.fromRGB(255, 125, 0) or Color3.fromRGB(255, 249, 74)
    FlyFrame.Visible = flyEnabled
    
    if flyEnabled then
        nowe = true
        
        -- Start speed walking for each speed level
        for i = 1, speeds do
            spawn(function()
                local hb = game:GetService("RunService").Heartbeat    
                tpwalking = true
                local chr = game.Players.LocalPlayer.Character
                local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                    if hum.MoveDirection.Magnitude > 0 then
                        chr:TranslateBy(hum.MoveDirection)
                    end
                end
            end)
        end
        
        -- Disable animations
        game.Players.LocalPlayer.Character.Animate.Disabled = true
        local Char = game.Players.LocalPlayer.Character
        local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

        for i,v in next, Hum:GetPlayingAnimationTracks() do
            v:AdjustSpeed(0)
        end
        
        -- Disable all humanoid states
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, false)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, false)
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        
        -- Handle different rig types
        if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
            -- R6 rig flying
            local plr = game.Players.LocalPlayer
            local torso = plr.Character.Torso
            local flying = true
            local deb = true
            local maxspeed = 50
            local flyspeed = 0

            -- Create BodyGyro for orientation
            local bg = Instance.new("BodyGyro", torso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = torso.CFrame
            
            -- Create BodyVelocity for movement
            local bv = Instance.new("BodyVelocity", torso)
            bv.velocity = Vector3.new(0, 0.1, 0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            
            plr.Character.Humanoid.PlatformStand = true
            
            -- Main flying loop
            spawn(function()
                while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                    game:GetService("RunService").RenderStepped:Wait()

                    -- Adjust speed based on movement
                    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                        flyspeed = flyspeed + 0.5 + (flyspeed/maxspeed)
                        if flyspeed > maxspeed then
                            flyspeed = maxspeed
                        end
                    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and flyspeed ~= 0 then
                        flyspeed = flyspeed - 1
                        if flyspeed < 0 then
                            flyspeed = 0
                        end
                    end
                    
                    -- Set velocity based on controls
                    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * flyspeed * speeds
                        lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and flyspeed ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * flyspeed * speeds
                    else
                        bv.velocity = Vector3.new(0, 0, 0)
                    end
                    
                    -- Update orientation
                    bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*flyspeed/maxspeed), 0, 0)
                    
                    -- Check if flying is still enabled
                    if not nowe then
                        bg:Destroy()
                        bv:Destroy()
                        plr.Character.Humanoid.PlatformStand = false
                        game.Players.LocalPlayer.Character.Animate.Disabled = false
                        tpwalking = false
                        break
                    end
                end
                
                -- Clean up if loop exits
                if bg and bg.Parent then
                    bg:Destroy()
                end
                if bv and bv.Parent then
                    bv:Destroy()
                end
                
                plr.Character.Humanoid.PlatformStand = false
                game.Players.LocalPlayer.Character.Animate.Disabled = false
                tpwalking = false
            end)
        else
            -- R15 rig flying
            local plr = game.Players.LocalPlayer
            local UpperTorso = plr.Character.UpperTorso
            local flying = true
            local deb = true
            local maxspeed = 50
            local flyspeed = 0

            -- Create BodyGyro for orientation
            local bg = Instance.new("BodyGyro", UpperTorso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = UpperTorso.CFrame
            
            -- Create BodyVelocity for movement
            local bv = Instance.new("BodyVelocity", UpperTorso)
            bv.velocity = Vector3.new(0, 0.1, 0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            
            plr.Character.Humanoid.PlatformStand = true
            
            -- Main flying loop
            spawn(function()
                while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                    wait()

                    -- Adjust speed based on movement
                    if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                        flyspeed = flyspeed + 0.5 + (flyspeed/maxspeed)
                        if flyspeed > maxspeed then
                            flyspeed = maxspeed
                        end
                    elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and flyspeed ~= 0 then
                        flyspeed = flyspeed - 1
                        if flyspeed < 0 then
                            flyspeed = 0
                        end
                    end
                    
                    -- Set velocity based on controls
                    if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * flyspeed * speeds
                        lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                    elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and flyspeed ~= 0 then
                        bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p)) * flyspeed * speeds
                    else
                        bv.velocity = Vector3.new(0, 0, 0)
                    end
                    
                    -- Update orientation
                    bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*flyspeed/maxspeed), 0, 0)
                    
                    -- Check if flying is still enabled
                    if not nowe then
                        bg:Destroy()
                        bv:Destroy()
                        plr.Character.Humanoid.PlatformStand = false
                        game.Players.LocalPlayer.Character.Animate.Disabled = false
                        tpwalking = false
                        break
                    end
                end
                
                -- Clean up if loop exits
                if bg and bg.Parent then
                    bg:Destroy()
                end
                if bv and bv.Parent then
                    bv:Destroy()
                end
                
                plr.Character.Humanoid.PlatformStand = false
                game.Players.LocalPlayer.Character.Animate.Disabled = false
                tpwalking = false
            end)
        end
    else
        nowe = false
        
        -- Re-enable all humanoid states
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics, true)
        player.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
        player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
        
        tpwalking = false
    end
end

-- UP button functionality
local tis
up.MouseButton1Down:connect(function()
    tis = up.MouseEnter:connect(function()
        while tis do
            wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 0)
        end
    end)
end)

up.MouseLeave:connect(function()
    if tis then
        tis:Disconnect()
        tis = nil
    end
end)

-- DOWN button functionality
local dis
down.MouseButton1Down:connect(function()
    dis = down.MouseEnter:connect(function()
        while dis do
            wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -1, 0)
        end
    end)
end)

down.MouseLeave:connect(function()
    if dis then
        dis:Disconnect()
        dis = nil
    end
end)

-- PLUS button functionality
plus.MouseButton1Down:connect(function()
    speeds = speeds + 1
    speed.Text = speeds
    if nowe == true then
        tpwalking = false
        for i = 1, speeds do
            spawn(function()
                local hb = game:GetService("RunService").Heartbeat    
                tpwalking = true
                local chr = game.Players.LocalPlayer.Character
                local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                    if hum.MoveDirection.Magnitude > 0 then
                        chr:TranslateBy(hum.MoveDirection)
                    end
                end
            end)
        end
    end
end)

-- MINUS button functionality
mine.MouseButton1Down:connect(function()
    if speeds == 1 then
        speed.Text = 'cannot be less than 1'
        wait(1)
        speed.Text = speeds
    else
        speeds = speeds - 1
        speed.Text = speeds
        if nowe == true then
            tpwalking = false
            for i = 1, speeds do
                spawn(function()
                    local hb = game:GetService("RunService").Heartbeat    
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
                end)
            end
        end
    end
end)

-- Connect buttons to functions
NoClipButton.MouseButton1Click:Connect(toggleNoClip)
SpeedWalkButton.MouseButton1Click:Connect(toggleSpeedWalk)
onof.MouseButton1Click:Connect(toggleFly)

-- CLOSE button functionality
closebutton.MouseButton1Click:Connect(function()
    main:Destroy()
    -- Clean up any running processes
    tpwalking = false
    noClipEnabled = false
    nowe = false
end)

-- MINIMIZE button functionality
mini.MouseButton1Click:Connect(function()
    MainFrame.Size = UDim2.new(0, 250, 0, 30)
    NoClipButton.Visible = false
    SpeedWalkButton.Visible = false
    SpeedLabel.Visible = false
    SpeedInput.Visible = false
    onof.Visible = false
    mini.Visible = false
    mini2.Visible = true
    FlyFrame.Visible = false
end)

-- RESTORE button functionality
mini2.MouseButton1Click:Connect(function()
    MainFrame.Size = UDim2.new(0, 250, 0, 200)
    NoClipButton.Visible = true
    SpeedWalkButton.Visible = true
    SpeedLabel.Visible = true
    SpeedInput.Visible = true
    onof.Visible = true
    mini.Visible = true
    mini2.Visible = false
    if flyEnabled then
        FlyFrame.Visible = true
    end
end)

-- NoClip Loop
RunService.Stepped:Connect(function()
    setNoCollision()
end)

-- Character Added
player.CharacterAdded:Connect(function(char)
    updateCharacterReferences()
    wait(0.7)
    
    -- Reset states when character respawns
    if speedWalkEnabled then
        toggleSpeedWalk()
    end
    
    if noClipEnabled then
        toggleNoClip()
    end
    
    if flyEnabled then
        toggleFly()
    end
    
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
    game.Players.LocalPlayer.Character.Animate.Disabled = false
end)

-- Update speed values when textbox changes
SpeedInput.FocusLost:Connect(function()
    local newSpeed = tonumber(SpeedInput.Text)
    if not newSpeed then
        SpeedInput.Text = "0.01"
    end
    
    if speedWalkEnabled then
        toggleSpeedWalk()
        wait(0.1)
        toggleSpeedWalk()
    end
end)
